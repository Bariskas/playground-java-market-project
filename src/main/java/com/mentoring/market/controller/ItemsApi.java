/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mentoring.market.controller;

import com.mentoring.market.entity.Item;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-17T04:33:33.116737+03:00[Europe/Moscow]")
@Validated
@Api(value = "items", description = "the items API")
public interface ItemsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /items : Delete existing Item
     *
     * @param id  (required)
     * @return Item deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete existing Item", nickname = "itemsDelete", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Item deleted successfully") })
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/items"
    )
    default ResponseEntity<Void> itemsDelete(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /items : List items
     * List current items in db
     *
     * @return Items fetched well (status code 200)
     */
    @ApiOperation(value = "List items", nickname = "itemsGet", notes = "List current items in db", response = Item.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Items fetched well", response = Item.class, responseContainer = "List") })
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/items",
            produces = { "application/json" }
    )
    default ResponseEntity<List<Item>> itemsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /items : Create new Item
     * Request for new Item
     *
     * @param item  (optional)
     * @return New Item returned (status code 200)
     */
    @ApiOperation(value = "Create new Item", nickname = "itemsPost", notes = "Request for new Item", response = Item.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "New Item returned", response = Item.class) })
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/items",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    default ResponseEntity<Item> itemsPost(@ApiParam(value = "") @Valid @RequestBody(required = false) Item item) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /items : Update existing Item
     *
     * @param item  (optional)
     * @return Updated Item (status code 200)
     */
    @ApiOperation(value = "Update existing Item", nickname = "itemsPut", notes = "", response = Item.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Updated Item", response = Item.class) })
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/items",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    default ResponseEntity<Item> itemsPut(@ApiParam(value = "") @Valid @RequestBody(required = false) Item item) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
